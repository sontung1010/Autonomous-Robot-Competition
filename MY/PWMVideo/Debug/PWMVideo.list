
PWMVideo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc4  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031cc  080031cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031d4  080031d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d4  080031d4  000131d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031d8  080031d8  000131d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  080031e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080031e8  00020160  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098f1  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001492  00000000  00000000  0002992b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002adc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002b780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261eb  00000000  00000000  0002c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a89e  00000000  00000000  00052283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1e4a  00000000  00000000  0005cb21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e96b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e8  00000000  00000000  0014e9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080031a4 	.word	0x080031a4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080031a4 	.word	0x080031a4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	0000      	movs	r0, r0
	...

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	GPIO_PinState mypushButton;
	uint32_t numTicks = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fdee 	bl	800112a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f91d 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 fb31 	bl	8000bb8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000556:	f000 f975 	bl	8000844 <MX_TIM1_Init>
  MX_TIM3_Init();
 800055a:	f000 fa79 	bl	8000a50 <MX_TIM3_Init>
  MX_TIM4_Init();
 800055e:	f000 fad1 	bl	8000b04 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000562:	f000 fa27 	bl	80009b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	//FRM PWM Start
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000566:	2100      	movs	r1, #0
 8000568:	487b      	ldr	r0, [pc, #492]	; (8000758 <main+0x218>)
 800056a:	f001 fe4d 	bl	8002208 <HAL_TIM_PWM_Start>
	//FLM PWM Start
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800056e:	2108      	movs	r1, #8
 8000570:	4879      	ldr	r0, [pc, #484]	; (8000758 <main+0x218>)
 8000572:	f001 fe49 	bl	8002208 <HAL_TIM_PWM_Start>
	//RRM PWM Start
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000576:	2100      	movs	r1, #0
 8000578:	4878      	ldr	r0, [pc, #480]	; (800075c <main+0x21c>)
 800057a:	f001 fe45 	bl	8002208 <HAL_TIM_PWM_Start>
	//RLM PWM Start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800057e:	210c      	movs	r1, #12
 8000580:	4877      	ldr	r0, [pc, #476]	; (8000760 <main+0x220>)
 8000582:	f001 fe41 	bl	8002208 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		mypushButton = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058a:	4876      	ldr	r0, [pc, #472]	; (8000764 <main+0x224>)
 800058c:	f001 f8bc 	bl	8001708 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	70fb      	strb	r3, [r7, #3]


		//Set TRIG to LOW for few uSec
		HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2120      	movs	r1, #32
 8000598:	4873      	ldr	r0, [pc, #460]	; (8000768 <main+0x228>)
 800059a:	f001 f8cd 	bl	8001738 <HAL_GPIO_WritePin>
		usDelay(3);
 800059e:	2003      	movs	r0, #3
 80005a0:	f000 fc10 	bl	8000dc4 <usDelay>
		//*** START Ultrasonic measure routine ***//
		//1. Output 10 usec TRIG
		HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2120      	movs	r1, #32
 80005a8:	486f      	ldr	r0, [pc, #444]	; (8000768 <main+0x228>)
 80005aa:	f001 f8c5 	bl	8001738 <HAL_GPIO_WritePin>
		usDelay(10);
 80005ae:	200a      	movs	r0, #10
 80005b0:	f000 fc08 	bl	8000dc4 <usDelay>
		HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	486b      	ldr	r0, [pc, #428]	; (8000768 <main+0x228>)
 80005ba:	f001 f8bd 	bl	8001738 <HAL_GPIO_WritePin>
		//2. Wait for ECHO pin rising edge
		while(HAL_GPIO_ReadPin(ECHO1_GPIO_Port, ECHO1_Pin) == GPIO_PIN_RESET);
 80005be:	bf00      	nop
 80005c0:	2108      	movs	r1, #8
 80005c2:	486a      	ldr	r0, [pc, #424]	; (800076c <main+0x22c>)
 80005c4:	f001 f8a0 	bl	8001708 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d0f8      	beq.n	80005c0 <main+0x80>
		//3. Start measuring ECHO pulse width in usec
		numTicks = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
		while(HAL_GPIO_ReadPin(ECHO1_GPIO_Port, ECHO1_Pin) == GPIO_PIN_SET)
 80005d2:	e005      	b.n	80005e0 <main+0xa0>
		{
			numTicks++;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3301      	adds	r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
			usDelay(2); //2.8usec
 80005da:	2002      	movs	r0, #2
 80005dc:	f000 fbf2 	bl	8000dc4 <usDelay>
		while(HAL_GPIO_ReadPin(ECHO1_GPIO_Port, ECHO1_Pin) == GPIO_PIN_SET)
 80005e0:	2108      	movs	r1, #8
 80005e2:	4862      	ldr	r0, [pc, #392]	; (800076c <main+0x22c>)
 80005e4:	f001 f890 	bl	8001708 <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d0f2      	beq.n	80005d4 <main+0x94>
		};
		//4. Estimate distance in cm
		distance = (numTicks + 0.0f)*2.8*speedOfSound;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	ee07 3a90 	vmov	s15, r3
 80005f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005f8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000770 <main+0x230>
 80005fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000600:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000604:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8000750 <main+0x210>
 8000608:	ee27 6b06 	vmul.f64	d6, d7, d6
 800060c:	eddf 7a59 	vldr	s15, [pc, #356]	; 8000774 <main+0x234>
 8000610:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000614:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000618:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800061c:	4b56      	ldr	r3, [pc, #344]	; (8000778 <main+0x238>)
 800061e:	edc3 7a00 	vstr	s15, [r3]
		//5. Print to UART terminal for debugging
		//sprintf(uartBuf, "Distance (cm)  = %.1f\r\n", distance);
		//HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
		if(distance < DISTANCE_THRESHOLD)
 8000622:	4b55      	ldr	r3, [pc, #340]	; (8000778 <main+0x238>)
 8000624:	edd3 7a00 	vldr	s15, [r3]
 8000628:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800062c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000634:	d544      	bpl.n	80006c0 <main+0x180>
		{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1); // turn on LED
 8000636:	2201      	movs	r2, #1
 8000638:	2101      	movs	r1, #1
 800063a:	4850      	ldr	r0, [pc, #320]	; (800077c <main+0x23c>)
 800063c:	f001 f87c 	bl	8001738 <HAL_GPIO_WritePin>
		//FRM
		htim1.Instance->CCR1 = 0;
 8000640:	4b45      	ldr	r3, [pc, #276]	; (8000758 <main+0x218>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2200      	movs	r2, #0
 8000646:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064e:	4846      	ldr	r0, [pc, #280]	; (8000768 <main+0x228>)
 8000650:	f001 f872 	bl	8001738 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(D5_GPIO_Port,D5_Pin, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065a:	4849      	ldr	r0, [pc, #292]	; (8000780 <main+0x240>)
 800065c:	f001 f86c 	bl	8001738 <HAL_GPIO_WritePin>
		//FLM
		htim1.Instance->CCR3 = 0;
 8000660:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <main+0x218>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066e:	4845      	ldr	r0, [pc, #276]	; (8000784 <main+0x244>)
 8000670:	f001 f862 	bl	8001738 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067a:	483b      	ldr	r0, [pc, #236]	; (8000768 <main+0x228>)
 800067c:	f001 f85c 	bl	8001738 <HAL_GPIO_WritePin>
		//RRM
		htim3.Instance->CCR1 = 0;
 8000680:	4b36      	ldr	r3, [pc, #216]	; (800075c <main+0x21c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2200      	movs	r2, #0
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068e:	4837      	ldr	r0, [pc, #220]	; (800076c <main+0x22c>)
 8000690:	f001 f852 	bl	8001738 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(D11_GPIO_Port,D11_Pin, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	483b      	ldr	r0, [pc, #236]	; (8000788 <main+0x248>)
 800069a:	f001 f84d 	bl	8001738 <HAL_GPIO_WritePin>
		//RLM
		htim4.Instance->CCR4 = 0;
 800069e:	4b30      	ldr	r3, [pc, #192]	; (8000760 <main+0x220>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2200      	movs	r2, #0
 80006a4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	482e      	ldr	r0, [pc, #184]	; (8000768 <main+0x228>)
 80006ae:	f001 f843 	bl	8001738 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(D8_GPIO_Port,D8_Pin, 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b8:	482b      	ldr	r0, [pc, #172]	; (8000768 <main+0x228>)
 80006ba:	f001 f83d 	bl	8001738 <HAL_GPIO_WritePin>
 80006be:	e762      	b.n	8000586 <main+0x46>
		}
		else
		{
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);  // turn off LED
 80006c0:	2200      	movs	r2, #0
 80006c2:	2101      	movs	r1, #1
 80006c4:	482d      	ldr	r0, [pc, #180]	; (800077c <main+0x23c>)
 80006c6:	f001 f837 	bl	8001738 <HAL_GPIO_WritePin>
		//FRM
		htim1.Instance->CCR1 = 50;
 80006ca:	4b23      	ldr	r3, [pc, #140]	; (8000758 <main+0x218>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2232      	movs	r2, #50	; 0x32
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d8:	4823      	ldr	r0, [pc, #140]	; (8000768 <main+0x228>)
 80006da:	f001 f82d 	bl	8001738 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D5_GPIO_Port,D5_Pin, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e4:	4826      	ldr	r0, [pc, #152]	; (8000780 <main+0x240>)
 80006e6:	f001 f827 	bl	8001738 <HAL_GPIO_WritePin>
		//FLM
		htim1.Instance->CCR3 = 50;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <main+0x218>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2232      	movs	r2, #50	; 0x32
 80006f0:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f8:	4822      	ldr	r0, [pc, #136]	; (8000784 <main+0x244>)
 80006fa:	f001 f81d 	bl	8001738 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000704:	4818      	ldr	r0, [pc, #96]	; (8000768 <main+0x228>)
 8000706:	f001 f817 	bl	8001738 <HAL_GPIO_WritePin>
		//RRM
		htim3.Instance->CCR1 = 50;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <main+0x21c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2232      	movs	r2, #50	; 0x32
 8000710:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000718:	4814      	ldr	r0, [pc, #80]	; (800076c <main+0x22c>)
 800071a:	f001 f80d 	bl	8001738 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D11_GPIO_Port,D11_Pin, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	4819      	ldr	r0, [pc, #100]	; (8000788 <main+0x248>)
 8000724:	f001 f808 	bl	8001738 <HAL_GPIO_WritePin>
		//
		htim4.Instance->CCR4 = 50;
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <main+0x220>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2232      	movs	r2, #50	; 0x32
 800072e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000736:	480c      	ldr	r0, [pc, #48]	; (8000768 <main+0x228>)
 8000738:	f000 fffe 	bl	8001738 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D8_GPIO_Port,D8_Pin, 1);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <main+0x228>)
 8000744:	f000 fff8 	bl	8001738 <HAL_GPIO_WritePin>
		mypushButton = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000748:	e71d      	b.n	8000586 <main+0x46>
 800074a:	bf00      	nop
 800074c:	f3af 8000 	nop.w
 8000750:	66666666 	.word	0x66666666
 8000754:	40066666 	.word	0x40066666
 8000758:	20000028 	.word	0x20000028
 800075c:	200000c0 	.word	0x200000c0
 8000760:	2000010c 	.word	0x2000010c
 8000764:	40020800 	.word	0x40020800
 8000768:	40021400 	.word	0x40021400
 800076c:	40020c00 	.word	0x40020c00
 8000770:	00000000 	.word	0x00000000
 8000774:	3c8c7e28 	.word	0x3c8c7e28
 8000778:	20000158 	.word	0x20000158
 800077c:	40020400 	.word	0x40020400
 8000780:	40021000 	.word	0x40021000
 8000784:	40021800 	.word	0x40021800
 8000788:	40020000 	.word	0x40020000

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fcfa 	bl	8003194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <SystemClock_Config+0xb0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <SystemClock_Config+0xb0>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <SystemClock_Config+0xb0>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <SystemClock_Config+0xb4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <SystemClock_Config+0xb4>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <SystemClock_Config+0xb4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ec:	2310      	movs	r3, #16
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 ffb7 	bl	800176c <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000804:	f000 fb16 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fa4f 	bl	8001cc8 <HAL_RCC_ClockConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000830:	f000 fb00 	bl	8000e34 <Error_Handler>
  }
}
 8000834:	bf00      	nop
 8000836:	3750      	adds	r7, #80	; 0x50
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b09a      	sub	sp, #104	; 0x68
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000858:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
 8000874:	615a      	str	r2, [r3, #20]
 8000876:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	222c      	movs	r2, #44	; 0x2c
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f002 fc88 	bl	8003194 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000884:	4b49      	ldr	r3, [pc, #292]	; (80009ac <MX_TIM1_Init+0x168>)
 8000886:	4a4a      	ldr	r2, [pc, #296]	; (80009b0 <MX_TIM1_Init+0x16c>)
 8000888:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800088a:	4b48      	ldr	r3, [pc, #288]	; (80009ac <MX_TIM1_Init+0x168>)
 800088c:	220f      	movs	r2, #15
 800088e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b46      	ldr	r3, [pc, #280]	; (80009ac <MX_TIM1_Init+0x168>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000896:	4b45      	ldr	r3, [pc, #276]	; (80009ac <MX_TIM1_Init+0x168>)
 8000898:	2264      	movs	r2, #100	; 0x64
 800089a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b43      	ldr	r3, [pc, #268]	; (80009ac <MX_TIM1_Init+0x168>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008a2:	4b42      	ldr	r3, [pc, #264]	; (80009ac <MX_TIM1_Init+0x168>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b40      	ldr	r3, [pc, #256]	; (80009ac <MX_TIM1_Init+0x168>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ae:	483f      	ldr	r0, [pc, #252]	; (80009ac <MX_TIM1_Init+0x168>)
 80008b0:	f001 fbfc 	bl	80020ac <HAL_TIM_Base_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008ba:	f000 fabb 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008c8:	4619      	mov	r1, r3
 80008ca:	4838      	ldr	r0, [pc, #224]	; (80009ac <MX_TIM1_Init+0x168>)
 80008cc:	f001 feaa 	bl	8002624 <HAL_TIM_ConfigClockSource>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008d6:	f000 faad 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008da:	4834      	ldr	r0, [pc, #208]	; (80009ac <MX_TIM1_Init+0x168>)
 80008dc:	f001 fc3d 	bl	800215a <HAL_TIM_PWM_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008e6:	f000 faa5 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008fa:	4619      	mov	r1, r3
 80008fc:	482b      	ldr	r0, [pc, #172]	; (80009ac <MX_TIM1_Init+0x168>)
 80008fe:	f002 fb19 	bl	8002f34 <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000908:	f000 fa94 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090c:	2360      	movs	r3, #96	; 0x60
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8000910:	2364      	movs	r3, #100	; 0x64
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000918:	2300      	movs	r3, #0
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000928:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	481e      	ldr	r0, [pc, #120]	; (80009ac <MX_TIM1_Init+0x168>)
 8000932:	f001 fd63 	bl	80023fc <HAL_TIM_PWM_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800093c:	f000 fa7a 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000944:	2208      	movs	r2, #8
 8000946:	4619      	mov	r1, r3
 8000948:	4818      	ldr	r0, [pc, #96]	; (80009ac <MX_TIM1_Init+0x168>)
 800094a:	f001 fd57 	bl	80023fc <HAL_TIM_PWM_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000954:	f000 fa6e 	bl	8000e34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800097a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4619      	mov	r1, r3
 800098c:	4807      	ldr	r0, [pc, #28]	; (80009ac <MX_TIM1_Init+0x168>)
 800098e:	f002 fb5f 	bl	8003050 <HAL_TIMEx_ConfigBreakDeadTime>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000998:	f000 fa4c 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <MX_TIM1_Init+0x168>)
 800099e:	f000 fad9 	bl	8000f54 <HAL_TIM_MspPostInit>

}
 80009a2:	bf00      	nop
 80009a4:	3768      	adds	r7, #104	; 0x68
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000028 	.word	0x20000028
 80009b0:	40010000 	.word	0x40010000

080009b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009dc:	220f      	movs	r2, #15
 80009de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009e8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009fc:	f001 fb56 	bl	80020ac <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a06:	f000 fa15 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_TIM2_Init+0x98>)
 8000a18:	f001 fe04 	bl	8002624 <HAL_TIM_ConfigClockSource>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a22:	f000 fa07 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_TIM2_Init+0x98>)
 8000a34:	f002 fa7e 	bl	8002f34 <HAL_TIMEx_MasterConfigSynchronization>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a3e:	f000 f9f9 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	3720      	adds	r7, #32
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000074 	.word	0x20000074

08000a50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_TIM3_Init+0xac>)
 8000a76:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <MX_TIM3_Init+0xb0>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <MX_TIM3_Init+0xac>)
 8000a7c:	220f      	movs	r2, #15
 8000a7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <MX_TIM3_Init+0xac>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <MX_TIM3_Init+0xac>)
 8000a88:	2264      	movs	r2, #100	; 0x64
 8000a8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_TIM3_Init+0xac>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_TIM3_Init+0xac>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a98:	4818      	ldr	r0, [pc, #96]	; (8000afc <MX_TIM3_Init+0xac>)
 8000a9a:	f001 fb5e 	bl	800215a <HAL_TIM_PWM_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000aa4:	f000 f9c6 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4811      	ldr	r0, [pc, #68]	; (8000afc <MX_TIM3_Init+0xac>)
 8000ab8:	f002 fa3c 	bl	8002f34 <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ac2:	f000 f9b7 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac6:	2360      	movs	r3, #96	; 0x60
 8000ac8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100;
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <MX_TIM3_Init+0xac>)
 8000ade:	f001 fc8d 	bl	80023fc <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ae8:	f000 f9a4 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <MX_TIM3_Init+0xac>)
 8000aee:	f000 fa31 	bl	8000f54 <HAL_TIM_MspPostInit>

}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000c0 	.word	0x200000c0
 8000b00:	40000400 	.word	0x40000400

08000b04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
 8000b24:	615a      	str	r2, [r3, #20]
 8000b26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b28:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_TIM4_Init+0xac>)
 8000b2a:	4a22      	ldr	r2, [pc, #136]	; (8000bb4 <MX_TIM4_Init+0xb0>)
 8000b2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <MX_TIM4_Init+0xac>)
 8000b30:	220f      	movs	r2, #15
 8000b32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <MX_TIM4_Init+0xac>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_TIM4_Init+0xac>)
 8000b3c:	2264      	movs	r2, #100	; 0x64
 8000b3e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_TIM4_Init+0xac>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_TIM4_Init+0xac>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b4c:	4818      	ldr	r0, [pc, #96]	; (8000bb0 <MX_TIM4_Init+0xac>)
 8000b4e:	f001 fb04 	bl	800215a <HAL_TIM_PWM_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000b58:	f000 f96c 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MX_TIM4_Init+0xac>)
 8000b6c:	f002 f9e2 	bl	8002f34 <HAL_TIMEx_MasterConfigSynchronization>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000b76:	f000 f95d 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7a:	2360      	movs	r3, #96	; 0x60
 8000b7c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100;
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	220c      	movs	r2, #12
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <MX_TIM4_Init+0xac>)
 8000b92:	f001 fc33 	bl	80023fc <HAL_TIM_PWM_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000b9c:	f000 f94a 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <MX_TIM4_Init+0xac>)
 8000ba2:	f000 f9d7 	bl	8000f54 <HAL_TIM_MspPostInit>

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000010c 	.word	0x2000010c
 8000bb4:	40000800 	.word	0x40000800

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	4b75      	ldr	r3, [pc, #468]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a74      	ldr	r2, [pc, #464]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b72      	ldr	r3, [pc, #456]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be6:	4b6f      	ldr	r3, [pc, #444]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a6e      	ldr	r2, [pc, #440]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000bec:	f043 0320 	orr.w	r3, r3, #32
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b6c      	ldr	r3, [pc, #432]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0320 	and.w	r3, r3, #32
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b69      	ldr	r3, [pc, #420]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a68      	ldr	r2, [pc, #416]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b66      	ldr	r3, [pc, #408]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b63      	ldr	r3, [pc, #396]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a62      	ldr	r2, [pc, #392]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b60      	ldr	r3, [pc, #384]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c2e:	4b5d      	ldr	r3, [pc, #372]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a5c      	ldr	r2, [pc, #368]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c34:	f043 0310 	orr.w	r3, r3, #16
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b5a      	ldr	r3, [pc, #360]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0310 	and.w	r3, r3, #16
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	4b57      	ldr	r3, [pc, #348]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a56      	ldr	r2, [pc, #344]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c5e:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a50      	ldr	r2, [pc, #320]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b4e      	ldr	r3, [pc, #312]	; (8000da4 <MX_GPIO_Init+0x1ec>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIG1_Pin|D8_Pin|D7_Pin|D4_Pin
 8000c76:	2200      	movs	r2, #0
 8000c78:	f24f 0120 	movw	r1, #61472	; 0xf020
 8000c7c:	484a      	ldr	r0, [pc, #296]	; (8000da8 <MX_GPIO_Init+0x1f0>)
 8000c7e:	f000 fd5b 	bl	8001738 <HAL_GPIO_WritePin>
                          |D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	4849      	ldr	r0, [pc, #292]	; (8000dac <MX_GPIO_Init+0x1f4>)
 8000c88:	f000 fd56 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4847      	ldr	r0, [pc, #284]	; (8000db0 <MX_GPIO_Init+0x1f8>)
 8000c92:	f000 fd51 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c9c:	4845      	ldr	r0, [pc, #276]	; (8000db4 <MX_GPIO_Init+0x1fc>)
 8000c9e:	f000 fd4b 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca8:	4843      	ldr	r0, [pc, #268]	; (8000db8 <MX_GPIO_Init+0x200>)
 8000caa:	f000 fd45 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb4:	4841      	ldr	r0, [pc, #260]	; (8000dbc <MX_GPIO_Init+0x204>)
 8000cb6:	f000 fd3f 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	483c      	ldr	r0, [pc, #240]	; (8000dc0 <MX_GPIO_Init+0x208>)
 8000cd0:	f000 fb6e 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG1_Pin D8_Pin D7_Pin D4_Pin
                           D2_Pin */
  GPIO_InitStruct.Pin = TRIG1_Pin|D8_Pin|D7_Pin|D4_Pin
 8000cd4:	f24f 0320 	movw	r3, #61472	; 0xf020
 8000cd8:	61fb      	str	r3, [r7, #28]
                          |D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	482e      	ldr	r0, [pc, #184]	; (8000da8 <MX_GPIO_Init+0x1f0>)
 8000cee:	f000 fb5f 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D11_Pin */
  GPIO_InitStruct.Pin = D11_Pin;
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(D11_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4828      	ldr	r0, [pc, #160]	; (8000dac <MX_GPIO_Init+0x1f4>)
 8000d0a:	f000 fb51 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4822      	ldr	r0, [pc, #136]	; (8000db0 <MX_GPIO_Init+0x1f8>)
 8000d26:	f000 fb43 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D5_Pin */
  GPIO_InitStruct.Pin = D5_Pin;
 8000d2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	481c      	ldr	r0, [pc, #112]	; (8000db4 <MX_GPIO_Init+0x1fc>)
 8000d44:	f000 fb34 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D10_Pin */
  GPIO_InitStruct.Pin = D10_Pin;
 8000d48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4815      	ldr	r0, [pc, #84]	; (8000db8 <MX_GPIO_Init+0x200>)
 8000d62:	f000 fb25 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO1_Pin */
  GPIO_InitStruct.Pin = ECHO1_Pin;
 8000d66:	2308      	movs	r3, #8
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ECHO1_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <MX_GPIO_Init+0x200>)
 8000d7a:	f000 fb19 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D1_Pin */
  GPIO_InitStruct.Pin = D1_Pin;
 8000d7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(D1_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4809      	ldr	r0, [pc, #36]	; (8000dbc <MX_GPIO_Init+0x204>)
 8000d98:	f000 fb0a 	bl	80013b0 <HAL_GPIO_Init>

}
 8000d9c:	bf00      	nop
 8000d9e:	3730      	adds	r7, #48	; 0x30
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40021400 	.word	0x40021400
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020400 	.word	0x40020400
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40020c00 	.word	0x40020c00
 8000dbc:	40021800 	.word	0x40021800
 8000dc0:	40020800 	.word	0x40020800

08000dc4 <usDelay>:

/* USER CODE BEGIN 4 */
 void usDelay(uint32_t uSec)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d801      	bhi.n	8000dd6 <usDelay+0x12>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8000dd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8000de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de4:	2201      	movs	r2, #1
 8000de6:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8000de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df2:	f023 0301 	bic.w	r3, r3, #1
 8000df6:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8000df8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8000e08:	bf00      	nop
 8000e0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d1f8      	bne.n	8000e0a <usDelay+0x46>
	usTIM->SR &= ~(0x0001);
 8000e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e22:	f023 0301 	bic.w	r3, r3, #1
 8000e26:	6113      	str	r3, [r2, #16]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>
	...

08000e40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_MspInit+0x44>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <HAL_MspInit+0x44>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_MspInit+0x44>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_MspInit+0x44>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <HAL_MspInit+0x44>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_MspInit+0x44>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800

08000e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <HAL_TIM_Base_MspInit+0x5c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10c      	bne.n	8000eb4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_TIM_Base_MspInit+0x60>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <HAL_TIM_Base_MspInit+0x60>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_TIM_Base_MspInit+0x60>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eb2:	e010      	b.n	8000ed6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ebc:	d10b      	bne.n	8000ed6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_TIM_Base_MspInit+0x60>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <HAL_TIM_Base_MspInit+0x60>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <HAL_TIM_Base_MspInit+0x60>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	40023800 	.word	0x40023800

08000eec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <HAL_TIM_PWM_MspInit+0x5c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10c      	bne.n	8000f18 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <HAL_TIM_PWM_MspInit+0x60>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <HAL_TIM_PWM_MspInit+0x60>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_TIM_PWM_MspInit+0x60>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f16:	e010      	b.n	8000f3a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <HAL_TIM_PWM_MspInit+0x64>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10b      	bne.n	8000f3a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_TIM_PWM_MspInit+0x60>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <HAL_TIM_PWM_MspInit+0x60>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <HAL_TIM_PWM_MspInit+0x60>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40000400 	.word	0x40000400
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40000800 	.word	0x40000800

08000f54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a34      	ldr	r2, [pc, #208]	; (8001044 <HAL_TIM_MspPostInit+0xf0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d11d      	bne.n	8000fb2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f76:	4b34      	ldr	r3, [pc, #208]	; (8001048 <HAL_TIM_MspPostInit+0xf4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a33      	ldr	r2, [pc, #204]	; (8001048 <HAL_TIM_MspPostInit+0xf4>)
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b31      	ldr	r3, [pc, #196]	; (8001048 <HAL_TIM_MspPostInit+0xf4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_FRM_Pin|PWM_FLM_Pin;
 8000f8e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4828      	ldr	r0, [pc, #160]	; (800104c <HAL_TIM_MspPostInit+0xf8>)
 8000fac:	f000 fa00 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fb0:	e043      	b.n	800103a <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a26      	ldr	r2, [pc, #152]	; (8001050 <HAL_TIM_MspPostInit+0xfc>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d11c      	bne.n	8000ff6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <HAL_TIM_MspPostInit+0xf4>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <HAL_TIM_MspPostInit+0xf4>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <HAL_TIM_MspPostInit+0xf4>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_RRM_Pin;
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_RRM_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4819      	ldr	r0, [pc, #100]	; (8001054 <HAL_TIM_MspPostInit+0x100>)
 8000ff0:	f000 f9de 	bl	80013b0 <HAL_GPIO_Init>
}
 8000ff4:	e021      	b.n	800103a <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_TIM_MspPostInit+0x104>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d11c      	bne.n	800103a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_TIM_MspPostInit+0xf4>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_TIM_MspPostInit+0xf4>)
 8001006:	f043 0308 	orr.w	r3, r3, #8
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_TIM_MspPostInit+0xf4>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_RLM_Pin;
 8001018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800102a:	2302      	movs	r3, #2
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_RLM_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <HAL_TIM_MspPostInit+0x108>)
 8001036:	f000 f9bb 	bl	80013b0 <HAL_GPIO_Init>
}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40010000 	.word	0x40010000
 8001048:	40023800 	.word	0x40023800
 800104c:	40021000 	.word	0x40021000
 8001050:	40000400 	.word	0x40000400
 8001054:	40020000 	.word	0x40020000
 8001058:	40000800 	.word	0x40000800
 800105c:	40020c00 	.word	0x40020c00

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f87a 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010de:	490e      	ldr	r1, [pc, #56]	; (8001118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f4:	4c0b      	ldr	r4, [pc, #44]	; (8001124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001102:	f7ff ffd7 	bl	80010b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001106:	f002 f821 	bl	800314c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff fa19 	bl	8000540 <main>
  bx  lr    
 800110e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800111c:	080031dc 	.word	0x080031dc
  ldr r2, =_sbss
 8001120:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001124:	20000160 	.word	0x20000160

08001128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC_IRQHandler>

0800112a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112e:	2003      	movs	r0, #3
 8001130:	f000 f90a 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001134:	2000      	movs	r0, #0
 8001136:	f000 f805 	bl	8001144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113a:	f7ff fe81 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x54>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x58>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f917 	bl	8001396 <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00e      	b.n	8001190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d80a      	bhi.n	800118e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f000 f8ed 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_InitTick+0x5c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000000 	.word	0x20000000
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x24>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_IncTick+0x24>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008
 80011c8:	2000015c 	.word	0x2000015c

080011cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	2000015c 	.word	0x2000015c

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <__NVIC_SetPriorityGrouping+0x40>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	4313      	orrs	r3, r2
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x40>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00
 8001228:	05fa0000 	.word	0x05fa0000

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff47 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff5c 	bl	800122c <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff8e 	bl	800129c <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffb0 	bl	8001304 <SysTick_Config>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	e175      	b.n	80016bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8164 	bne.w	80016b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d005      	beq.n	8001406 <HAL_GPIO_Init+0x56>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d130      	bne.n	8001468 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800143c:	2201      	movs	r2, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	f003 0201 	and.w	r2, r3, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b03      	cmp	r3, #3
 8001472:	d017      	beq.n	80014a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d123      	bne.n	80014f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	08da      	lsrs	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3208      	adds	r2, #8
 80014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	08da      	lsrs	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3208      	adds	r2, #8
 80014f2:	69b9      	ldr	r1, [r7, #24]
 80014f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0203 	and.w	r2, r3, #3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80be 	beq.w	80016b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	4b66      	ldr	r3, [pc, #408]	; (80016d4 <HAL_GPIO_Init+0x324>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a65      	ldr	r2, [pc, #404]	; (80016d4 <HAL_GPIO_Init+0x324>)
 8001540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <HAL_GPIO_Init+0x324>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001552:	4a61      	ldr	r2, [pc, #388]	; (80016d8 <HAL_GPIO_Init+0x328>)
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	3302      	adds	r3, #2
 800155a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	220f      	movs	r2, #15
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a58      	ldr	r2, [pc, #352]	; (80016dc <HAL_GPIO_Init+0x32c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d037      	beq.n	80015ee <HAL_GPIO_Init+0x23e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a57      	ldr	r2, [pc, #348]	; (80016e0 <HAL_GPIO_Init+0x330>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d031      	beq.n	80015ea <HAL_GPIO_Init+0x23a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a56      	ldr	r2, [pc, #344]	; (80016e4 <HAL_GPIO_Init+0x334>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d02b      	beq.n	80015e6 <HAL_GPIO_Init+0x236>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a55      	ldr	r2, [pc, #340]	; (80016e8 <HAL_GPIO_Init+0x338>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d025      	beq.n	80015e2 <HAL_GPIO_Init+0x232>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a54      	ldr	r2, [pc, #336]	; (80016ec <HAL_GPIO_Init+0x33c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01f      	beq.n	80015de <HAL_GPIO_Init+0x22e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a53      	ldr	r2, [pc, #332]	; (80016f0 <HAL_GPIO_Init+0x340>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_GPIO_Init+0x22a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a52      	ldr	r2, [pc, #328]	; (80016f4 <HAL_GPIO_Init+0x344>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x226>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a51      	ldr	r2, [pc, #324]	; (80016f8 <HAL_GPIO_Init+0x348>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x222>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a50      	ldr	r2, [pc, #320]	; (80016fc <HAL_GPIO_Init+0x34c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x21e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4f      	ldr	r2, [pc, #316]	; (8001700 <HAL_GPIO_Init+0x350>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x21a>
 80015c6:	2309      	movs	r3, #9
 80015c8:	e012      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015ca:	230a      	movs	r3, #10
 80015cc:	e010      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015ce:	2308      	movs	r3, #8
 80015d0:	e00e      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015d2:	2307      	movs	r3, #7
 80015d4:	e00c      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015d6:	2306      	movs	r3, #6
 80015d8:	e00a      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015da:	2305      	movs	r3, #5
 80015dc:	e008      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015de:	2304      	movs	r3, #4
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015e2:	2303      	movs	r3, #3
 80015e4:	e004      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e002      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015ee:	2300      	movs	r3, #0
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	f002 0203 	and.w	r2, r2, #3
 80015f6:	0092      	lsls	r2, r2, #2
 80015f8:	4093      	lsls	r3, r2
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001600:	4935      	ldr	r1, [pc, #212]	; (80016d8 <HAL_GPIO_Init+0x328>)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160e:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <HAL_GPIO_Init+0x354>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001632:	4a34      	ldr	r2, [pc, #208]	; (8001704 <HAL_GPIO_Init+0x354>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001638:	4b32      	ldr	r3, [pc, #200]	; (8001704 <HAL_GPIO_Init+0x354>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800165c:	4a29      	ldr	r2, [pc, #164]	; (8001704 <HAL_GPIO_Init+0x354>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001662:	4b28      	ldr	r3, [pc, #160]	; (8001704 <HAL_GPIO_Init+0x354>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001686:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <HAL_GPIO_Init+0x354>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <HAL_GPIO_Init+0x354>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b0:	4a14      	ldr	r2, [pc, #80]	; (8001704 <HAL_GPIO_Init+0x354>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3301      	adds	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	2b0f      	cmp	r3, #15
 80016c0:	f67f ae86 	bls.w	80013d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40013800 	.word	0x40013800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020c00 	.word	0x40020c00
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40021400 	.word	0x40021400
 80016f4:	40021800 	.word	0x40021800
 80016f8:	40021c00 	.word	0x40021c00
 80016fc:	40022000 	.word	0x40022000
 8001700:	40022400 	.word	0x40022400
 8001704:	40013c00 	.word	0x40013c00

08001708 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e001      	b.n	800172a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001754:	e003      	b.n	800175e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	041a      	lsls	r2, r3, #16
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	619a      	str	r2, [r3, #24]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e29b      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8087 	beq.w	800189e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001790:	4b96      	ldr	r3, [pc, #600]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b04      	cmp	r3, #4
 800179a:	d00c      	beq.n	80017b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179c:	4b93      	ldr	r3, [pc, #588]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d112      	bne.n	80017ce <HAL_RCC_OscConfig+0x62>
 80017a8:	4b90      	ldr	r3, [pc, #576]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017b4:	d10b      	bne.n	80017ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b6:	4b8d      	ldr	r3, [pc, #564]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d06c      	beq.n	800189c <HAL_RCC_OscConfig+0x130>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d168      	bne.n	800189c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e275      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x7a>
 80017d8:	4b84      	ldr	r3, [pc, #528]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a83      	ldr	r2, [pc, #524]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80017de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	e02e      	b.n	8001844 <HAL_RCC_OscConfig+0xd8>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x9c>
 80017ee:	4b7f      	ldr	r3, [pc, #508]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a7e      	ldr	r2, [pc, #504]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80017f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b7c      	ldr	r3, [pc, #496]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a7b      	ldr	r2, [pc, #492]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e01d      	b.n	8001844 <HAL_RCC_OscConfig+0xd8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0xc0>
 8001812:	4b76      	ldr	r3, [pc, #472]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a75      	ldr	r2, [pc, #468]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b73      	ldr	r3, [pc, #460]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a72      	ldr	r2, [pc, #456]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0xd8>
 800182c:	4b6f      	ldr	r3, [pc, #444]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a6e      	ldr	r2, [pc, #440]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b6c      	ldr	r3, [pc, #432]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a6b      	ldr	r2, [pc, #428]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 800183e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff fcbe 	bl	80011cc <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fcba 	bl	80011cc <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e229      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b61      	ldr	r3, [pc, #388]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0xe8>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fcaa 	bl	80011cc <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff fca6 	bl	80011cc <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e215      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	4b57      	ldr	r3, [pc, #348]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x110>
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d069      	beq.n	800197e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018aa:	4b50      	ldr	r3, [pc, #320]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b6:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d11c      	bne.n	80018fc <HAL_RCC_OscConfig+0x190>
 80018c2:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d116      	bne.n	80018fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	4b47      	ldr	r3, [pc, #284]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_RCC_OscConfig+0x17a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e1e9      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	493d      	ldr	r1, [pc, #244]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	e040      	b.n	800197e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d023      	beq.n	800194c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001904:	4b39      	ldr	r3, [pc, #228]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a38      	ldr	r2, [pc, #224]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fc5c 	bl	80011cc <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff fc58 	bl	80011cc <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e1c7      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	4b30      	ldr	r3, [pc, #192]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4929      	ldr	r1, [pc, #164]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
 800194a:	e018      	b.n	800197e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a26      	ldr	r2, [pc, #152]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fc38 	bl	80011cc <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001960:	f7ff fc34 	bl	80011cc <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1a3      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001972:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d038      	beq.n	80019fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d019      	beq.n	80019c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001996:	4a15      	ldr	r2, [pc, #84]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff fc15 	bl	80011cc <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a6:	f7ff fc11 	bl	80011cc <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e180      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80019ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x23a>
 80019c4:	e01a      	b.n	80019fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80019c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_RCC_OscConfig+0x280>)
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d2:	f7ff fbfb 	bl	80011cc <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff fbf7 	bl	80011cc <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d903      	bls.n	80019f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e166      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
 80019ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	4b92      	ldr	r3, [pc, #584]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 80019f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1ee      	bne.n	80019da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80a4 	beq.w	8001b52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0a:	4b8c      	ldr	r3, [pc, #560]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10d      	bne.n	8001a32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b89      	ldr	r3, [pc, #548]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a88      	ldr	r2, [pc, #544]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b86      	ldr	r3, [pc, #536]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a32:	4b83      	ldr	r3, [pc, #524]	; (8001c40 <HAL_RCC_OscConfig+0x4d4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d118      	bne.n	8001a70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a3e:	4b80      	ldr	r3, [pc, #512]	; (8001c40 <HAL_RCC_OscConfig+0x4d4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a7f      	ldr	r2, [pc, #508]	; (8001c40 <HAL_RCC_OscConfig+0x4d4>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fbbf 	bl	80011cc <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7ff fbbb 	bl	80011cc <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b64      	cmp	r3, #100	; 0x64
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e12a      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a64:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x4d4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x31a>
 8001a78:	4b70      	ldr	r3, [pc, #448]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	4a6f      	ldr	r2, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6713      	str	r3, [r2, #112]	; 0x70
 8001a84:	e02d      	b.n	8001ae2 <HAL_RCC_OscConfig+0x376>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x33c>
 8001a8e:	4b6b      	ldr	r3, [pc, #428]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	4a6a      	ldr	r2, [pc, #424]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9a:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	4a67      	ldr	r2, [pc, #412]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa6:	e01c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x376>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x35e>
 8001ab0:	4b62      	ldr	r3, [pc, #392]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	4a61      	ldr	r2, [pc, #388]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6713      	str	r3, [r2, #112]	; 0x70
 8001abc:	4b5f      	ldr	r3, [pc, #380]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac0:	4a5e      	ldr	r2, [pc, #376]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac8:	e00b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x376>
 8001aca:	4b5c      	ldr	r3, [pc, #368]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ace:	4a5b      	ldr	r2, [pc, #364]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad6:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ada:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d015      	beq.n	8001b16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aea:	f7ff fb6f 	bl	80011cc <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7ff fb6b 	bl	80011cc <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e0d8      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ee      	beq.n	8001af2 <HAL_RCC_OscConfig+0x386>
 8001b14:	e014      	b.n	8001b40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b16:	f7ff fb59 	bl	80011cc <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff fb55 	bl	80011cc <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0c2      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1ee      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d105      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a3c      	ldr	r2, [pc, #240]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80ae 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b5c:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d06d      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d14b      	bne.n	8001c08 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a31      	ldr	r2, [pc, #196]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fb26 	bl	80011cc <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff fb22 	bl	80011cc <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e091      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	019b      	lsls	r3, r3, #6
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	041b      	lsls	r3, r3, #16
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	061b      	lsls	r3, r3, #24
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	071b      	lsls	r3, r3, #28
 8001bce:	491b      	ldr	r1, [pc, #108]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff faf4 	bl	80011cc <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff faf0 	bl	80011cc <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e05f      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x47c>
 8001c06:	e057      	b.n	8001cb8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fada 	bl	80011cc <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff fad6 	bl	80011cc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e045      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_RCC_OscConfig+0x4d0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4b0>
 8001c3a:	e03d      	b.n	8001cb8 <HAL_RCC_OscConfig+0x54c>
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_RCC_OscConfig+0x558>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d030      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d129      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d122      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c74:	4013      	ands	r3, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d119      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d10f      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0d0      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b6a      	ldr	r3, [pc, #424]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d910      	bls.n	8001d10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 020f 	bic.w	r2, r3, #15
 8001cf6:	4965      	ldr	r1, [pc, #404]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b63      	ldr	r3, [pc, #396]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0b8      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d020      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d28:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a58      	ldr	r2, [pc, #352]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d40:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4a52      	ldr	r2, [pc, #328]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4c:	4b50      	ldr	r3, [pc, #320]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	494d      	ldr	r1, [pc, #308]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d040      	beq.n	8001dec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d115      	bne.n	8001daa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e07f      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8a:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e073      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9a:	4b3d      	ldr	r3, [pc, #244]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e06b      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001daa:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f023 0203 	bic.w	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4936      	ldr	r1, [pc, #216]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dbc:	f7ff fa06 	bl	80011cc <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc2:	e00a      	b.n	8001dda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc4:	f7ff fa02 	bl	80011cc <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e053      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 020c 	and.w	r2, r3, #12
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d1eb      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d210      	bcs.n	8001e1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 020f 	bic.w	r2, r3, #15
 8001e02:	4922      	ldr	r1, [pc, #136]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e032      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4916      	ldr	r1, [pc, #88]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d009      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	490e      	ldr	r1, [pc, #56]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e5a:	f000 f821 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	490a      	ldr	r1, [pc, #40]	; (8001e94 <HAL_RCC_ClockConfig+0x1cc>)
 8001e6c:	5ccb      	ldrb	r3, [r1, r3]
 8001e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x1d0>)
 8001e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_ClockConfig+0x1d4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f962 	bl	8001144 <HAL_InitTick>

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00
 8001e90:	40023800 	.word	0x40023800
 8001e94:	080031bc 	.word	0x080031bc
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000004 	.word	0x20000004

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea4:	b094      	sub	sp, #80	; 0x50
 8001ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8001eac:	2300      	movs	r3, #0
 8001eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eb8:	4b79      	ldr	r3, [pc, #484]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	f200 80e1 	bhi.w	800208c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d003      	beq.n	8001eda <HAL_RCC_GetSysClockFreq+0x3a>
 8001ed2:	e0db      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ed4:	4b73      	ldr	r3, [pc, #460]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ed6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ed8:	e0db      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eda:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001edc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ede:	e0d8      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ee0:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001eea:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d063      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef6:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	099b      	lsrs	r3, r3, #6
 8001efc:	2200      	movs	r2, #0
 8001efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f08:	633b      	str	r3, [r7, #48]	; 0x30
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f12:	4622      	mov	r2, r4
 8001f14:	462b      	mov	r3, r5
 8001f16:	f04f 0000 	mov.w	r0, #0
 8001f1a:	f04f 0100 	mov.w	r1, #0
 8001f1e:	0159      	lsls	r1, r3, #5
 8001f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f24:	0150      	lsls	r0, r2, #5
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	1a51      	subs	r1, r2, r1
 8001f2e:	6139      	str	r1, [r7, #16]
 8001f30:	4629      	mov	r1, r5
 8001f32:	eb63 0301 	sbc.w	r3, r3, r1
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f44:	4659      	mov	r1, fp
 8001f46:	018b      	lsls	r3, r1, #6
 8001f48:	4651      	mov	r1, sl
 8001f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f4e:	4651      	mov	r1, sl
 8001f50:	018a      	lsls	r2, r1, #6
 8001f52:	4651      	mov	r1, sl
 8001f54:	ebb2 0801 	subs.w	r8, r2, r1
 8001f58:	4659      	mov	r1, fp
 8001f5a:	eb63 0901 	sbc.w	r9, r3, r1
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f72:	4690      	mov	r8, r2
 8001f74:	4699      	mov	r9, r3
 8001f76:	4623      	mov	r3, r4
 8001f78:	eb18 0303 	adds.w	r3, r8, r3
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	462b      	mov	r3, r5
 8001f80:	eb49 0303 	adc.w	r3, r9, r3
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f92:	4629      	mov	r1, r5
 8001f94:	024b      	lsls	r3, r1, #9
 8001f96:	4621      	mov	r1, r4
 8001f98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	024a      	lsls	r2, r1, #9
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fb0:	f7fe f942 	bl	8000238 <__aeabi_uldivmod>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4613      	mov	r3, r2
 8001fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fbc:	e058      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	099b      	lsrs	r3, r3, #6
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	4611      	mov	r1, r2
 8001fca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fd8:	4642      	mov	r2, r8
 8001fda:	464b      	mov	r3, r9
 8001fdc:	f04f 0000 	mov.w	r0, #0
 8001fe0:	f04f 0100 	mov.w	r1, #0
 8001fe4:	0159      	lsls	r1, r3, #5
 8001fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fea:	0150      	lsls	r0, r2, #5
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4641      	mov	r1, r8
 8001ff2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ff6:	4649      	mov	r1, r9
 8001ff8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002008:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800200c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002010:	ebb2 040a 	subs.w	r4, r2, sl
 8002014:	eb63 050b 	sbc.w	r5, r3, fp
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	00eb      	lsls	r3, r5, #3
 8002022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002026:	00e2      	lsls	r2, r4, #3
 8002028:	4614      	mov	r4, r2
 800202a:	461d      	mov	r5, r3
 800202c:	4643      	mov	r3, r8
 800202e:	18e3      	adds	r3, r4, r3
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	464b      	mov	r3, r9
 8002034:	eb45 0303 	adc.w	r3, r5, r3
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002046:	4629      	mov	r1, r5
 8002048:	028b      	lsls	r3, r1, #10
 800204a:	4621      	mov	r1, r4
 800204c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002050:	4621      	mov	r1, r4
 8002052:	028a      	lsls	r2, r1, #10
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800205a:	2200      	movs	r2, #0
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	61fa      	str	r2, [r7, #28]
 8002060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002064:	f7fe f8e8 	bl	8000238 <__aeabi_uldivmod>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4613      	mov	r3, r2
 800206e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	3301      	adds	r3, #1
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800208a:	e002      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800208e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002094:	4618      	mov	r0, r3
 8002096:	3750      	adds	r7, #80	; 0x50
 8002098:	46bd      	mov	sp, r7
 800209a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	00f42400 	.word	0x00f42400
 80020a8:	007a1200 	.word	0x007a1200

080020ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e049      	b.n	8002152 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7fe fed8 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3304      	adds	r3, #4
 80020e8:	4619      	mov	r1, r3
 80020ea:	4610      	mov	r0, r2
 80020ec:	f000 fb64 	bl	80027b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e049      	b.n	8002200 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d106      	bne.n	8002186 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7fe feb3 	bl	8000eec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2202      	movs	r2, #2
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3304      	adds	r3, #4
 8002196:	4619      	mov	r1, r3
 8002198:	4610      	mov	r0, r2
 800219a:	f000 fb0d 	bl	80027b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_TIM_PWM_Start+0x24>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	bf14      	ite	ne
 8002224:	2301      	movne	r3, #1
 8002226:	2300      	moveq	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	e03c      	b.n	80022a6 <HAL_TIM_PWM_Start+0x9e>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b04      	cmp	r3, #4
 8002230:	d109      	bne.n	8002246 <HAL_TIM_PWM_Start+0x3e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	bf14      	ite	ne
 800223e:	2301      	movne	r3, #1
 8002240:	2300      	moveq	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	e02f      	b.n	80022a6 <HAL_TIM_PWM_Start+0x9e>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d109      	bne.n	8002260 <HAL_TIM_PWM_Start+0x58>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	e022      	b.n	80022a6 <HAL_TIM_PWM_Start+0x9e>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2b0c      	cmp	r3, #12
 8002264:	d109      	bne.n	800227a <HAL_TIM_PWM_Start+0x72>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	bf14      	ite	ne
 8002272:	2301      	movne	r3, #1
 8002274:	2300      	moveq	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	e015      	b.n	80022a6 <HAL_TIM_PWM_Start+0x9e>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b10      	cmp	r3, #16
 800227e:	d109      	bne.n	8002294 <HAL_TIM_PWM_Start+0x8c>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	e008      	b.n	80022a6 <HAL_TIM_PWM_Start+0x9e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e092      	b.n	80023d4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d104      	bne.n	80022be <HAL_TIM_PWM_Start+0xb6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022bc:	e023      	b.n	8002306 <HAL_TIM_PWM_Start+0xfe>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d104      	bne.n	80022ce <HAL_TIM_PWM_Start+0xc6>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022cc:	e01b      	b.n	8002306 <HAL_TIM_PWM_Start+0xfe>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d104      	bne.n	80022de <HAL_TIM_PWM_Start+0xd6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022dc:	e013      	b.n	8002306 <HAL_TIM_PWM_Start+0xfe>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b0c      	cmp	r3, #12
 80022e2:	d104      	bne.n	80022ee <HAL_TIM_PWM_Start+0xe6>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022ec:	e00b      	b.n	8002306 <HAL_TIM_PWM_Start+0xfe>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d104      	bne.n	80022fe <HAL_TIM_PWM_Start+0xf6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022fc:	e003      	b.n	8002306 <HAL_TIM_PWM_Start+0xfe>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2201      	movs	r2, #1
 800230c:	6839      	ldr	r1, [r7, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fdea 	bl	8002ee8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a30      	ldr	r2, [pc, #192]	; (80023dc <HAL_TIM_PWM_Start+0x1d4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d004      	beq.n	8002328 <HAL_TIM_PWM_Start+0x120>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a2f      	ldr	r2, [pc, #188]	; (80023e0 <HAL_TIM_PWM_Start+0x1d8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d101      	bne.n	800232c <HAL_TIM_PWM_Start+0x124>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <HAL_TIM_PWM_Start+0x126>
 800232c:	2300      	movs	r3, #0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a25      	ldr	r2, [pc, #148]	; (80023dc <HAL_TIM_PWM_Start+0x1d4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d022      	beq.n	8002392 <HAL_TIM_PWM_Start+0x18a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002354:	d01d      	beq.n	8002392 <HAL_TIM_PWM_Start+0x18a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a22      	ldr	r2, [pc, #136]	; (80023e4 <HAL_TIM_PWM_Start+0x1dc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d018      	beq.n	8002392 <HAL_TIM_PWM_Start+0x18a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a20      	ldr	r2, [pc, #128]	; (80023e8 <HAL_TIM_PWM_Start+0x1e0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_TIM_PWM_Start+0x18a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <HAL_TIM_PWM_Start+0x1e4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00e      	beq.n	8002392 <HAL_TIM_PWM_Start+0x18a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <HAL_TIM_PWM_Start+0x1d8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d009      	beq.n	8002392 <HAL_TIM_PWM_Start+0x18a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <HAL_TIM_PWM_Start+0x1e8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d004      	beq.n	8002392 <HAL_TIM_PWM_Start+0x18a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <HAL_TIM_PWM_Start+0x1ec>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d115      	bne.n	80023be <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_TIM_PWM_Start+0x1f0>)
 800239a:	4013      	ands	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b06      	cmp	r3, #6
 80023a2:	d015      	beq.n	80023d0 <HAL_TIM_PWM_Start+0x1c8>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023aa:	d011      	beq.n	80023d0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023bc:	e008      	b.n	80023d0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	e000      	b.n	80023d2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40010000 	.word	0x40010000
 80023e0:	40010400 	.word	0x40010400
 80023e4:	40000400 	.word	0x40000400
 80023e8:	40000800 	.word	0x40000800
 80023ec:	40000c00 	.word	0x40000c00
 80023f0:	40014000 	.word	0x40014000
 80023f4:	40001800 	.word	0x40001800
 80023f8:	00010007 	.word	0x00010007

080023fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002416:	2302      	movs	r3, #2
 8002418:	e0ff      	b.n	800261a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b14      	cmp	r3, #20
 8002426:	f200 80f0 	bhi.w	800260a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800242a:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002485 	.word	0x08002485
 8002434:	0800260b 	.word	0x0800260b
 8002438:	0800260b 	.word	0x0800260b
 800243c:	0800260b 	.word	0x0800260b
 8002440:	080024c5 	.word	0x080024c5
 8002444:	0800260b 	.word	0x0800260b
 8002448:	0800260b 	.word	0x0800260b
 800244c:	0800260b 	.word	0x0800260b
 8002450:	08002507 	.word	0x08002507
 8002454:	0800260b 	.word	0x0800260b
 8002458:	0800260b 	.word	0x0800260b
 800245c:	0800260b 	.word	0x0800260b
 8002460:	08002547 	.word	0x08002547
 8002464:	0800260b 	.word	0x0800260b
 8002468:	0800260b 	.word	0x0800260b
 800246c:	0800260b 	.word	0x0800260b
 8002470:	08002589 	.word	0x08002589
 8002474:	0800260b 	.word	0x0800260b
 8002478:	0800260b 	.word	0x0800260b
 800247c:	0800260b 	.word	0x0800260b
 8002480:	080025c9 	.word	0x080025c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fa34 	bl	80028f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0208 	orr.w	r2, r2, #8
 800249e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0204 	bic.w	r2, r2, #4
 80024ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6999      	ldr	r1, [r3, #24]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	619a      	str	r2, [r3, #24]
      break;
 80024c2:	e0a5      	b.n	8002610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fa86 	bl	80029dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6999      	ldr	r1, [r3, #24]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	021a      	lsls	r2, r3, #8
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	619a      	str	r2, [r3, #24]
      break;
 8002504:	e084      	b.n	8002610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fadd 	bl	8002acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0208 	orr.w	r2, r2, #8
 8002520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0204 	bic.w	r2, r2, #4
 8002530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69d9      	ldr	r1, [r3, #28]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	61da      	str	r2, [r3, #28]
      break;
 8002544:	e064      	b.n	8002610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fb33 	bl	8002bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69d9      	ldr	r1, [r3, #28]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	021a      	lsls	r2, r3, #8
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	61da      	str	r2, [r3, #28]
      break;
 8002586:	e043      	b.n	8002610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fb6a 	bl	8002c68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0208 	orr.w	r2, r2, #8
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0204 	bic.w	r2, r2, #4
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80025c6:	e023      	b.n	8002610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fb9c 	bl	8002d0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	021a      	lsls	r2, r3, #8
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002608:	e002      	b.n	8002610 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
      break;
 800260e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002618:	7dfb      	ldrb	r3, [r7, #23]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop

08002624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_TIM_ConfigClockSource+0x1c>
 800263c:	2302      	movs	r3, #2
 800263e:	e0b4      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x186>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	4b56      	ldr	r3, [pc, #344]	; (80027b4 <HAL_TIM_ConfigClockSource+0x190>)
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002678:	d03e      	beq.n	80026f8 <HAL_TIM_ConfigClockSource+0xd4>
 800267a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267e:	f200 8087 	bhi.w	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002686:	f000 8086 	beq.w	8002796 <HAL_TIM_ConfigClockSource+0x172>
 800268a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268e:	d87f      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 8002690:	2b70      	cmp	r3, #112	; 0x70
 8002692:	d01a      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0xa6>
 8002694:	2b70      	cmp	r3, #112	; 0x70
 8002696:	d87b      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 8002698:	2b60      	cmp	r3, #96	; 0x60
 800269a:	d050      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x11a>
 800269c:	2b60      	cmp	r3, #96	; 0x60
 800269e:	d877      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026a0:	2b50      	cmp	r3, #80	; 0x50
 80026a2:	d03c      	beq.n	800271e <HAL_TIM_ConfigClockSource+0xfa>
 80026a4:	2b50      	cmp	r3, #80	; 0x50
 80026a6:	d873      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d058      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x13a>
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d86f      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026b0:	2b30      	cmp	r3, #48	; 0x30
 80026b2:	d064      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15a>
 80026b4:	2b30      	cmp	r3, #48	; 0x30
 80026b6:	d86b      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d060      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15a>
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d867      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d05c      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15a>
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d05a      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15a>
 80026c8:	e062      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f000 fbe5 	bl	8002ea8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	609a      	str	r2, [r3, #8]
      break;
 80026f6:	e04f      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f000 fbce 	bl	8002ea8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800271a:	609a      	str	r2, [r3, #8]
      break;
 800271c:	e03c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	461a      	mov	r2, r3
 800272c:	f000 fb42 	bl	8002db4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2150      	movs	r1, #80	; 0x50
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fb9b 	bl	8002e72 <TIM_ITRx_SetConfig>
      break;
 800273c:	e02c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	461a      	mov	r2, r3
 800274c:	f000 fb61 	bl	8002e12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2160      	movs	r1, #96	; 0x60
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fb8b 	bl	8002e72 <TIM_ITRx_SetConfig>
      break;
 800275c:	e01c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	461a      	mov	r2, r3
 800276c:	f000 fb22 	bl	8002db4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2140      	movs	r1, #64	; 0x40
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fb7b 	bl	8002e72 <TIM_ITRx_SetConfig>
      break;
 800277c:	e00c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f000 fb72 	bl	8002e72 <TIM_ITRx_SetConfig>
      break;
 800278e:	e003      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      break;
 8002794:	e000      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	fffeff88 	.word	0xfffeff88

080027b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a40      	ldr	r2, [pc, #256]	; (80028cc <TIM_Base_SetConfig+0x114>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <TIM_Base_SetConfig+0x40>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d6:	d00f      	beq.n	80027f8 <TIM_Base_SetConfig+0x40>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a3d      	ldr	r2, [pc, #244]	; (80028d0 <TIM_Base_SetConfig+0x118>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00b      	beq.n	80027f8 <TIM_Base_SetConfig+0x40>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a3c      	ldr	r2, [pc, #240]	; (80028d4 <TIM_Base_SetConfig+0x11c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d007      	beq.n	80027f8 <TIM_Base_SetConfig+0x40>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a3b      	ldr	r2, [pc, #236]	; (80028d8 <TIM_Base_SetConfig+0x120>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d003      	beq.n	80027f8 <TIM_Base_SetConfig+0x40>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a3a      	ldr	r2, [pc, #232]	; (80028dc <TIM_Base_SetConfig+0x124>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d108      	bne.n	800280a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a2f      	ldr	r2, [pc, #188]	; (80028cc <TIM_Base_SetConfig+0x114>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02b      	beq.n	800286a <TIM_Base_SetConfig+0xb2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002818:	d027      	beq.n	800286a <TIM_Base_SetConfig+0xb2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a2c      	ldr	r2, [pc, #176]	; (80028d0 <TIM_Base_SetConfig+0x118>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d023      	beq.n	800286a <TIM_Base_SetConfig+0xb2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a2b      	ldr	r2, [pc, #172]	; (80028d4 <TIM_Base_SetConfig+0x11c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01f      	beq.n	800286a <TIM_Base_SetConfig+0xb2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a2a      	ldr	r2, [pc, #168]	; (80028d8 <TIM_Base_SetConfig+0x120>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01b      	beq.n	800286a <TIM_Base_SetConfig+0xb2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a29      	ldr	r2, [pc, #164]	; (80028dc <TIM_Base_SetConfig+0x124>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d017      	beq.n	800286a <TIM_Base_SetConfig+0xb2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a28      	ldr	r2, [pc, #160]	; (80028e0 <TIM_Base_SetConfig+0x128>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <TIM_Base_SetConfig+0xb2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a27      	ldr	r2, [pc, #156]	; (80028e4 <TIM_Base_SetConfig+0x12c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00f      	beq.n	800286a <TIM_Base_SetConfig+0xb2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a26      	ldr	r2, [pc, #152]	; (80028e8 <TIM_Base_SetConfig+0x130>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00b      	beq.n	800286a <TIM_Base_SetConfig+0xb2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a25      	ldr	r2, [pc, #148]	; (80028ec <TIM_Base_SetConfig+0x134>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d007      	beq.n	800286a <TIM_Base_SetConfig+0xb2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a24      	ldr	r2, [pc, #144]	; (80028f0 <TIM_Base_SetConfig+0x138>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d003      	beq.n	800286a <TIM_Base_SetConfig+0xb2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a23      	ldr	r2, [pc, #140]	; (80028f4 <TIM_Base_SetConfig+0x13c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d108      	bne.n	800287c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <TIM_Base_SetConfig+0x114>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d003      	beq.n	80028b0 <TIM_Base_SetConfig+0xf8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a0c      	ldr	r2, [pc, #48]	; (80028dc <TIM_Base_SetConfig+0x124>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d103      	bne.n	80028b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	615a      	str	r2, [r3, #20]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40010000 	.word	0x40010000
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40000800 	.word	0x40000800
 80028d8:	40000c00 	.word	0x40000c00
 80028dc:	40010400 	.word	0x40010400
 80028e0:	40014000 	.word	0x40014000
 80028e4:	40014400 	.word	0x40014400
 80028e8:	40014800 	.word	0x40014800
 80028ec:	40001800 	.word	0x40001800
 80028f0:	40001c00 	.word	0x40001c00
 80028f4:	40002000 	.word	0x40002000

080028f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	f023 0201 	bic.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <TIM_OC1_SetConfig+0xd8>)
 8002924:	4013      	ands	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0303 	bic.w	r3, r3, #3
 800292e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f023 0302 	bic.w	r3, r3, #2
 8002940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a21      	ldr	r2, [pc, #132]	; (80029d4 <TIM_OC1_SetConfig+0xdc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d003      	beq.n	800295c <TIM_OC1_SetConfig+0x64>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a20      	ldr	r2, [pc, #128]	; (80029d8 <TIM_OC1_SetConfig+0xe0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d10c      	bne.n	8002976 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f023 0308 	bic.w	r3, r3, #8
 8002962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <TIM_OC1_SetConfig+0xdc>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d003      	beq.n	8002986 <TIM_OC1_SetConfig+0x8e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a15      	ldr	r2, [pc, #84]	; (80029d8 <TIM_OC1_SetConfig+0xe0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d111      	bne.n	80029aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800298c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	621a      	str	r2, [r3, #32]
}
 80029c4:	bf00      	nop
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	fffeff8f 	.word	0xfffeff8f
 80029d4:	40010000 	.word	0x40010000
 80029d8:	40010400 	.word	0x40010400

080029dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	f023 0210 	bic.w	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <TIM_OC2_SetConfig+0xe4>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f023 0320 	bic.w	r3, r3, #32
 8002a26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a23      	ldr	r2, [pc, #140]	; (8002ac4 <TIM_OC2_SetConfig+0xe8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d003      	beq.n	8002a44 <TIM_OC2_SetConfig+0x68>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a22      	ldr	r2, [pc, #136]	; (8002ac8 <TIM_OC2_SetConfig+0xec>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d10d      	bne.n	8002a60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <TIM_OC2_SetConfig+0xe8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d003      	beq.n	8002a70 <TIM_OC2_SetConfig+0x94>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <TIM_OC2_SetConfig+0xec>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d113      	bne.n	8002a98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	621a      	str	r2, [r3, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	feff8fff 	.word	0xfeff8fff
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40010400 	.word	0x40010400

08002acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <TIM_OC3_SetConfig+0xe0>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0303 	bic.w	r3, r3, #3
 8002b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <TIM_OC3_SetConfig+0xe4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d003      	beq.n	8002b32 <TIM_OC3_SetConfig+0x66>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <TIM_OC3_SetConfig+0xe8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d10d      	bne.n	8002b4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <TIM_OC3_SetConfig+0xe4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d003      	beq.n	8002b5e <TIM_OC3_SetConfig+0x92>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <TIM_OC3_SetConfig+0xe8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d113      	bne.n	8002b86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	621a      	str	r2, [r3, #32]
}
 8002ba0:	bf00      	nop
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	fffeff8f 	.word	0xfffeff8f
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <TIM_OC4_SetConfig+0xa4>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	031b      	lsls	r3, r3, #12
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <TIM_OC4_SetConfig+0xa8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d003      	beq.n	8002c20 <TIM_OC4_SetConfig+0x68>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <TIM_OC4_SetConfig+0xac>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d109      	bne.n	8002c34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	621a      	str	r2, [r3, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	feff8fff 	.word	0xfeff8fff
 8002c60:	40010000 	.word	0x40010000
 8002c64:	40010400 	.word	0x40010400

08002c68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <TIM_OC5_SetConfig+0x98>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002ca8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	041b      	lsls	r3, r3, #16
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <TIM_OC5_SetConfig+0x9c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d003      	beq.n	8002cc6 <TIM_OC5_SetConfig+0x5e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <TIM_OC5_SetConfig+0xa0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d109      	bne.n	8002cda <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	621a      	str	r2, [r3, #32]
}
 8002cf4:	bf00      	nop
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	fffeff8f 	.word	0xfffeff8f
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40010400 	.word	0x40010400

08002d0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <TIM_OC6_SetConfig+0x9c>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	051b      	lsls	r3, r3, #20
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a13      	ldr	r2, [pc, #76]	; (8002dac <TIM_OC6_SetConfig+0xa0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d003      	beq.n	8002d6c <TIM_OC6_SetConfig+0x60>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <TIM_OC6_SetConfig+0xa4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d109      	bne.n	8002d80 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	029b      	lsls	r3, r3, #10
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	feff8fff 	.word	0xfeff8fff
 8002dac:	40010000 	.word	0x40010000
 8002db0:	40010400 	.word	0x40010400

08002db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f023 0201 	bic.w	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f023 030a 	bic.w	r3, r3, #10
 8002df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b087      	sub	sp, #28
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f023 0210 	bic.w	r2, r3, #16
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	031b      	lsls	r3, r3, #12
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	621a      	str	r2, [r3, #32]
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f043 0307 	orr.w	r3, r3, #7
 8002e94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	609a      	str	r2, [r3, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	021a      	lsls	r2, r3, #8
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	609a      	str	r2, [r3, #8]
}
 8002edc:	bf00      	nop
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	2201      	movs	r2, #1
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	401a      	ands	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a1a      	ldr	r2, [r3, #32]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	431a      	orrs	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	621a      	str	r2, [r3, #32]
}
 8002f26:	bf00      	nop
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e06d      	b.n	8003028 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a30      	ldr	r2, [pc, #192]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2f      	ldr	r2, [pc, #188]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d108      	bne.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a20      	ldr	r2, [pc, #128]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d022      	beq.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbe:	d01d      	beq.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d018      	beq.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d013      	beq.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1a      	ldr	r2, [pc, #104]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00e      	beq.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a15      	ldr	r2, [pc, #84]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a16      	ldr	r2, [pc, #88]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a15      	ldr	r2, [pc, #84]	; (800304c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d10c      	bne.n	8003016 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003002:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	4313      	orrs	r3, r2
 800300c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40010000 	.word	0x40010000
 8003038:	40010400 	.word	0x40010400
 800303c:	40000400 	.word	0x40000400
 8003040:	40000800 	.word	0x40000800
 8003044:	40000c00 	.word	0x40000c00
 8003048:	40014000 	.word	0x40014000
 800304c:	40001800 	.word	0x40001800

08003050 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003068:	2302      	movs	r3, #2
 800306a:	e065      	b.n	8003138 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a16      	ldr	r2, [pc, #88]	; (8003144 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d004      	beq.n	80030fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a14      	ldr	r2, [pc, #80]	; (8003148 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d115      	bne.n	8003126 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	051b      	lsls	r3, r3, #20
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40010000 	.word	0x40010000
 8003148:	40010400 	.word	0x40010400

0800314c <__libc_init_array>:
 800314c:	b570      	push	{r4, r5, r6, lr}
 800314e:	4d0d      	ldr	r5, [pc, #52]	; (8003184 <__libc_init_array+0x38>)
 8003150:	4c0d      	ldr	r4, [pc, #52]	; (8003188 <__libc_init_array+0x3c>)
 8003152:	1b64      	subs	r4, r4, r5
 8003154:	10a4      	asrs	r4, r4, #2
 8003156:	2600      	movs	r6, #0
 8003158:	42a6      	cmp	r6, r4
 800315a:	d109      	bne.n	8003170 <__libc_init_array+0x24>
 800315c:	4d0b      	ldr	r5, [pc, #44]	; (800318c <__libc_init_array+0x40>)
 800315e:	4c0c      	ldr	r4, [pc, #48]	; (8003190 <__libc_init_array+0x44>)
 8003160:	f000 f820 	bl	80031a4 <_init>
 8003164:	1b64      	subs	r4, r4, r5
 8003166:	10a4      	asrs	r4, r4, #2
 8003168:	2600      	movs	r6, #0
 800316a:	42a6      	cmp	r6, r4
 800316c:	d105      	bne.n	800317a <__libc_init_array+0x2e>
 800316e:	bd70      	pop	{r4, r5, r6, pc}
 8003170:	f855 3b04 	ldr.w	r3, [r5], #4
 8003174:	4798      	blx	r3
 8003176:	3601      	adds	r6, #1
 8003178:	e7ee      	b.n	8003158 <__libc_init_array+0xc>
 800317a:	f855 3b04 	ldr.w	r3, [r5], #4
 800317e:	4798      	blx	r3
 8003180:	3601      	adds	r6, #1
 8003182:	e7f2      	b.n	800316a <__libc_init_array+0x1e>
 8003184:	080031d4 	.word	0x080031d4
 8003188:	080031d4 	.word	0x080031d4
 800318c:	080031d4 	.word	0x080031d4
 8003190:	080031d8 	.word	0x080031d8

08003194 <memset>:
 8003194:	4402      	add	r2, r0
 8003196:	4603      	mov	r3, r0
 8003198:	4293      	cmp	r3, r2
 800319a:	d100      	bne.n	800319e <memset+0xa>
 800319c:	4770      	bx	lr
 800319e:	f803 1b01 	strb.w	r1, [r3], #1
 80031a2:	e7f9      	b.n	8003198 <memset+0x4>

080031a4 <_init>:
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a6:	bf00      	nop
 80031a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031aa:	bc08      	pop	{r3}
 80031ac:	469e      	mov	lr, r3
 80031ae:	4770      	bx	lr

080031b0 <_fini>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	bf00      	nop
 80031b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b6:	bc08      	pop	{r3}
 80031b8:	469e      	mov	lr, r3
 80031ba:	4770      	bx	lr
